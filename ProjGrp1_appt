const http = require('http');
const url = require('url');

// Sample database of appointments
let appointments = [];

// Sample database of service requests
let serviceRequests = [];

// Function to create a new appointment
function createAppointment(memberID, dateTime, serviceType) {
    const appointmentID = 'A' + String(appointments.length + 1).padStart(5, '0');
    const newAppointment = {
        appointmentID,
        memberID,
        dateTime,
        serviceType,
        status: 'Scheduled' // New appointments are initially scheduled
    };
    appointments.push(newAppointment);
    return newAppointment;
}

// Function to create a new service request
function createServiceRequest(formData) {
    // Process and validate form data here
    // Store the service request in the database
    const requestId = 'SR' + String(serviceRequests.length + 1).padStart(5, '0');
    const newServiceRequest = {
        requestId,
        formData,
        status: 'Pending' // Initial status
    };
    serviceRequests.push(newServiceRequest);
    return newServiceRequest;
}

// Function to cancel an appointment
function cancelAppointment(appointmentID) {
    const index = appointments.findIndex(appointment => appointment.appointmentID === appointmentID);
    if (index !== -1) {
        appointments[index].status = 'Cancelled';
        return appointments[index];
    }
    return null; // Appointment not found
}

// Function to postpone an appointment
function postponeAppointment(appointmentID, newDateTime) {
    const index = appointments.findIndex(appointment => appointment.appointmentID === appointmentID);
    if (index !== -1) {
        appointments[index].dateTime = newDateTime;
        appointments[index].status = 'Postponed';
        return appointments[index];
    }
    return null; // Appointment not found
}

const server = http.createServer((req, res) => {
    const reqUrl = url.parse(req.url, true);
    const path = reqUrl.pathname;
    const method = req.method;

    if (method === 'POST' && path === '/appointment') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            const appointment = JSON.parse(body);

            const requiredProperties = ['memberID', 'dateTime', 'serviceType'];
            for (let prop of requiredProperties) {
                if (!appointment.hasOwnProperty(prop)) {
                    res.writeHead(400, {'Content-Type': 'text/plain'});
                    res.end(`Missing required property: ${prop}`);
                    return;
                }
            }

            const newAppointment = createAppointment(appointment.memberID, appointment.dateTime, appointment.serviceType);

            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(newAppointment));
        });
    } else if (method === 'POST' && path === '/servicerequest') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        req.on('end', () => {
            const formData = JSON.parse(body);

            // Additional validation and processing logic here

            // Create the service request
            const newServiceRequest = createServiceRequest(formData);

            // Send confirmation to the member
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify({ message: 'Service request received successfully', requestId: newServiceRequest.requestId }));
        });
    } else if (method === 'DELETE' && path.startsWith('/appointment/')) {
        const appointmentID = path.split('/')[2];
        const canceledAppointment = cancelAppointment(appointmentID);
        if (canceledAppointment) {
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(canceledAppointment));
        } else {
            res.writeHead(404, {'Content-Type': 'text/plain'});
            res.end('Appointment not found');
        }
    } else if (method === 'PUT' && path.startsWith('/appointment/')) {
        const appointmentID = path.split('/')[2];
        const action = reqUrl.query.action;
        if (action === 'postpone') {
            const newDateTime = reqUrl.query.dateTime;
            const postponedAppointment = postponeAppointment(appointmentID, newDateTime);
            if (postponedAppointment) {
                res.writeHead(200, {'Content-Type': 'application/json'});
                res.end(JSON.stringify(postponedAppointment));
            } else {
                res.writeHead(404, {'Content-Type': 'text/plain'});
                res.end('Appointment not found');
            }
        } else {
            res.writeHead(404, {'Content-Type': 'text/plain'});
            res.end('Action not supported');
        }
    } else {
        res.writeHead(404, {'Content-Type': 'text/plain'});
        res.end('Not Found');
    }
});

server.listen(3005, () => {
    console.log('Server listening on port 3005');
});

module.exports = server;